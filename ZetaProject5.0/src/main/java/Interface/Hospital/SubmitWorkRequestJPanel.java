/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.Hospital;

import Business.Ecosystem.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HospitalEnterprise;
import Business.Network.Network;
import Business.Organization.DoctorOrganization;
import Business.Organization.HospitalBackOfficerOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.HospitalWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kathe
 */
public class SubmitWorkRequestJPanel extends javax.swing.JPanel {
    private JPanel userProcessContainer;
    private UserAccount useraccount;
    private HospitalEnterprise hospital;
    private DoctorOrganization drorganization;
    private Network network;
    //SubmitDemandGoodJPanel submitDemandGoodJPanel;
    /**
     * Creates new form CheckWorkRequest
     */
    public SubmitWorkRequestJPanel(JPanel userProcessContainer, UserAccount useraccount,HospitalEnterprise hospital,Network network) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.useraccount=useraccount;
        this.hospital=hospital;
        this.network=network;
        //this.drorganization=drorganization;
        populateTable();
    }
    
    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel)workRequestJTable.getModel();
        model.setRowCount(0);
        
        for(WorkRequest request:useraccount.getWorkQueue().getWorkRequestList()){
            HospitalWorkRequest hrequest=(HospitalWorkRequest)request;
            Object[] row=new Object[6];
            row[0]=hrequest.getRequestId();
            String pattern = "yyyy-MM-dd";
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
            String date = simpleDateFormat.format(hrequest.getRequestDate());
            row[1]=date;
            row[2]=hrequest.getHandler()==null?null:hrequest.getHandler().getPerson().getName();
            row[3]=hrequest.getStatus();
            row[4] =hrequest ;
            
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        backJButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        createJButton = new javax.swing.JButton();
        addDemandGoodJButton = new javax.swing.JButton();
        DeleteJButton = new javax.swing.JButton();
        submitJButton = new javax.swing.JButton();
        dateChooser = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(192, 233, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        workRequestJTable.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Id", "Expected Date", "Handler", "Status", "Result"
            }
        ));
        workRequestJTable.setGridColor(new java.awt.Color(204, 204, 204));
        workRequestJTable.setRowHeight(30);
        jScrollPane1.setViewportView(workRequestJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 70, 720, 140));

        backJButton.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        backJButton.setText("<<back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 30, -1, -1));

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setText("Request Expected Date");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 260, -1, -1));

        createJButton.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        createJButton.setText("Create");
        createJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createJButtonActionPerformed(evt);
            }
        });
        add(createJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 330, -1, -1));

        addDemandGoodJButton.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        addDemandGoodJButton.setText("Add Demand Good");
        addDemandGoodJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDemandGoodJButtonActionPerformed(evt);
            }
        });
        add(addDemandGoodJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 330, -1, -1));

        DeleteJButton.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        DeleteJButton.setText("Delete");
        DeleteJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteJButtonActionPerformed(evt);
            }
        });
        add(DeleteJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 330, -1, -1));

        submitJButton.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        submitJButton.setText("Submit");
        submitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitJButtonActionPerformed(evt);
            }
        });
        add(submitJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 420, -1, -1));
        add(dateChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 250, 240, 30));

        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\NEU_Study\\INFO 5100 Spring\\Final_Project_Zeta\\Zeta_Images\\calendar.png")); // NOI18N
        jLabel1.setToolTipText("");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 290, 380, 400));
    }// </editor-fold>//GEN-END:initComponents

    private void createJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createJButtonActionPerformed
        // TODO add your handling code here:
//        String expectedDate=dateJTextField.getDateFormatString();
//       
//        
////        String[] arrOfStr = expectedDate.split("-",3);
////        for(String a: arrOfStr){
////            System.out.println(a);
////        }
//        String pattern = "yyyy-MM-dd";
//        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
//        String date = simpleDateFormat.format(expectedDate);
        
        HospitalWorkRequest hospitalWorkrequest=new HospitalWorkRequest();
//        Date expectedTime;
//        SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
        Date currentDate= new Date();
////        
////        
        if(dateChooser.getDate()== null ||dateChooser.toString().trim().isEmpty()){
            JOptionPane.showMessageDialog(null, "Please input the Expected Date!", "CREATE", JOptionPane.ERROR_MESSAGE);
            return;
        }
//        
//        if(Integer.parseInt(arrOfStr[1])>12 || Integer.parseInt(arrOfStr[2])>31 || expectedDate.length()<10){
//            JOptionPane.showMessageDialog(null, "Please input the correct Month and Date!", "CREATE", JOptionPane.ERROR_MESSAGE);
//           // dateJTextField.setText("");
//            return;
//        }
//        
//        try{
//            expectedTime=sdf.parse(expectedDate);
//        }catch (ParseException ex) {
//            JOptionPane.showMessageDialog(null, "Please input the correct expected date:yyyy-mm-dd", "Search", JOptionPane.ERROR_MESSAGE);
//           // dateJTextField.setText("");
//            return;
//        }
//        
        if(dateChooser.getDate().compareTo(currentDate)<0){
            JOptionPane.showMessageDialog(null, "Please don't input the expected date before today", "Error", JOptionPane.ERROR_MESSAGE);
            //dateJTextField.setText("");
            return;
        }
        //expectedTime=sdf.parse(expectedDate);
        hospitalWorkrequest.setSender(useraccount);
        hospitalWorkrequest.setStatus("Create");
        hospitalWorkrequest.setRequestDate(dateChooser.getDate());
                
        hospitalWorkrequest.setFromEnterprise(hospital);
        useraccount.getWorkQueue().getWorkRequestList().add(hospitalWorkrequest);
        
        populateTable();
        dateChooser.setCalendar(null);
        JOptionPane.showMessageDialog(null, "Create Successfully!");
        
    }//GEN-LAST:event_createJButtonActionPerformed

    private void addDemandGoodJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDemandGoodJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow=workRequestJTable.getSelectedRow(),col=0;
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select at least a row.", "INFORMATION", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Integer wrSelectedRow=(Integer)workRequestJTable.getValueAt(selectedRow, 0);
        
        HospitalWorkRequest hrequest=null;
        for(WorkRequest request:useraccount.getWorkQueue().getWorkRequestList()){
            HospitalWorkRequest newrequest=(HospitalWorkRequest)request;
            if(wrSelectedRow.equals(newrequest.getRequestId())){
                hrequest=newrequest;
                break;
            }
        }
        this.userProcessContainer.add("SubmitDemandGoodJPanel",new SubmitDemandGoodJPanel(this.userProcessContainer,useraccount,hospital,hrequest));
        CardLayout cLayout = (CardLayout) this.userProcessContainer.getLayout();
        cLayout.next(userProcessContainer);
    }//GEN-LAST:event_addDemandGoodJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
//        DoctorWorkArea dwjp = (DoctorWorkArea) component;
//        dwjp.populateTable();
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void DeleteJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow =workRequestJTable.getSelectedRow();
        
        if (selectedRow >= 0) {
            int selectionButton = JOptionPane.YES_NO_OPTION;
            int selectionResult = JOptionPane.showConfirmDialog(null, "Are you sure to delete??", "Warning", selectionButton);

            if (selectionResult == JOptionPane.YES_OPTION) {
                Integer wrSelectedRow=(Integer)workRequestJTable.getValueAt(selectedRow, 0);
                
                for(WorkRequest request:useraccount.getWorkQueue().getWorkRequestList()){
                    HospitalWorkRequest newrequest=(HospitalWorkRequest)request;
                    if(wrSelectedRow.equals(newrequest.getRequestId())){
                        if(newrequest.getStatus().equals("Send")||newrequest.getStatus().equals("Create")){
                            useraccount.getWorkQueue().getWorkRequestList().remove(newrequest);
                            hospital.getWorkQueue().getWorkRequestList().remove(newrequest);
                            
                            Enterprise charity=null;
                            for(Enterprise enterprise:network.getEnterpriseDirectory().getEnterpriseList()){
                                if(enterprise.getEnterpriseType().getValue().equals("Charity")){
                                    charity=enterprise;
                                }
                            }

                            if(charity!=null){
                                charity.getWorkQueue().getWorkRequestList().remove(newrequest);
                            } 
                           JOptionPane.showMessageDialog(null, "Delete Successfully!"); 
                        }else{
                             JOptionPane.showMessageDialog(null, "This request is processing,you cannot delete it.!"); 
                        }
                        break;  
                    }
                }
                populateTable();
                dateChooser.setCalendar(null);
                
            }

        } else {
            JOptionPane.showMessageDialog(null, "Please select a Row!!");
        }
    }//GEN-LAST:event_DeleteJButtonActionPerformed

    private void submitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow =workRequestJTable.getSelectedRow();
        
        if(selectedRow<0){
            JOptionPane.showMessageDialog(this, "Please select at least a row.", "INFORMATION", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        Integer wrSelectedRow=(Integer)workRequestJTable.getValueAt(selectedRow, 0);
        
        HospitalWorkRequest hrequest=null;
         for(WorkRequest request:useraccount.getWorkQueue().getWorkRequestList()){
            HospitalWorkRequest newrequest=(HospitalWorkRequest)request;
            if(wrSelectedRow.equals(newrequest.getRequestId())){
                hrequest=newrequest;
                break;
            }
        }
         
         if(hrequest!=null){
             
             if(!hrequest.getStatus().equals("Create")){
                 JOptionPane.showMessageDialog(null, "You have already submitted it!");
                  return;
             }
             
            // System.out.println("hrequest!=null");
             if(hrequest.getDemandGoodDirectory().getDemandGoodMap().size()==0){
               //  System.out.println("The demand good is null!");
                    JOptionPane.showMessageDialog(null, "This Request Does't have demand good! You can't submit it!");
                    return;
                    
                }else{
                    //useraccount.getWorkQueue().getWorkRequestList().remove(hrequest);
                    hospital.getWorkQueue().getWorkRequestList().add(hrequest);
                    hrequest.setStatus("Send");
                    JOptionPane.showMessageDialog(null, "Submit Successfully!");
                    //populateTable();
                }
         }
        
       populateTable();
       dateChooser.setCalendar(null);
    }//GEN-LAST:event_submitJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DeleteJButton;
    private javax.swing.JButton addDemandGoodJButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton createJButton;
    private com.toedter.calendar.JDateChooser dateChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton submitJButton;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
